;;;; Various functions to operate on Pascal source files.
;;
;; This file contains only pure functions. This means that evaluating
;; it inside Emacs does not change any user settings, global vars,
;; like associating some mode with *.pas files etc.
;; This file simply defines some functions, nothing more.

(require 'kambi-utils)

;; ------------------------------------------------------------

(defun replace-pascal-comment-one-line-to-wasaty-buffer ()
  (interactive)
  (kam-simple-re-replace-buffer "//\\([^\n]*\\)$" " {\\1}")
)

(defun property-extend-1 ()
  (interactive)
  (query-replace-regexp "^\\([ \t]*\\)property \\([0-9a-zA-Z]+\\):\\([0-9a-zA-Z]+\\);"
    "\\1F\\2:\\3;\n\\1property \\2:\\3 read F\\2 write F\\2;")
)

(defun directory-files-pascal-units (directory &optional full nosort)
  "Same thing as (`directory-files' DIRECTORY FULL MATCH NOSORT)
where MATCH is such that only *.pas and *.pp files match."
  (directory-files directory full ".*\\.\\(pas\\|pp\\)$" nosort)
)

(defun all-units-in-dir-internal-directory-files-pascal-units (dir subdir)
  (let ((final-dir (kam-file-name-in-directory dir subdir)))
    (if (file-exists-p final-dir)
        (directory-files-pascal-units final-dir)
      nil
    )
  )
)

(defun all-units-in-dir-internal-write-uses-list (dir-files result-ref
  this-unit-global-number-ref units-count comma-after-last-unit)
  "Extends RESULT by lines based on DIR-FILES.
Increments THIS-UNIT-GLOBAL-NUMBER-REF by the (length DIR-FILES).
Each line is ended with comma if:
  THIS-UNIT-GLOBAL-NUMBER-REF for this line is not equal to UNITS-COUNT
and
  this is not last item of DIR-FILES or COMMA-AFTER-LAST-UNIT is non-nil."

  ;; Strip extensions from filenames on dir-files
  (setq dir-files (mapcar 'file-name-sans-extension dir-files))

  (let ( (this-unit-number 1)
         (dir-files-length (length dir-files))
       )

    (dolist (dir-entry dir-files)
      (set result-ref
        (concat (eval result-ref) "  " dir-entry
          (if (and (/= (eval this-unit-global-number-ref) units-count)
                   (or comma-after-last-unit
                       (/= this-unit-number dir-files-length)))
            "," "")
          "\n")
      )
      (set this-unit-global-number-ref (1+ (eval this-unit-global-number-ref)))
      (setq this-unit-number (1+ this-unit-number))
    )
  )
)

(defun all-units-in-dir (dir unit-name)
  "This returns multi-line string that constitutes a Pascal unit.
This unit looks like

  unit UNIT-NAME;

  { ... Some comments ... }

  interface

  uses
    xxx_1,
    xxx_2,
    ...

    {$ifdef LINUX}
    xxx_linux_1,
    ...
    {$endif LINUX}

    {$ifdef UNIX}
    xxx_unix_1,
    ...
    {$endif UNIX}

    {$ifdef MSWINDOWS}
    xxx_windows_1,
    ...
    {$endif MSWINDOWS}
    ;

  implementation

  end.

where xxx_* are basenames of all *.pas and *.pp files in DIR
(but not UNIT-NAME, this is obvious, unit will not contain
itself in \"uses\" clause),
xxx_linux_* are basenames of all *.pas and *.pp files in DIR/linux/ subdirectory,
xxx_unix_*  are basenames of all *.pas and *.pp files in DIR/unix/  subdirectory,
xxx_windows_* are basenames of all *.pas and *.pp files in DIR/windows/ subdirectory.

I will add here more OSes names when I'll need them."
  (interactive)

  ;; I generate all directory-files-pascal-units first,
  ;; then calculate units-count. This is all done for one reason:
  ;; last unit line MUST NOT end with ",". So I must know
  ;; when I'm writing last unit line.

  (let ( (result (concat
           "unit " unit-name ";\n"
           "\n"
           "{ This is automatically generated unit, useful to compile all units\n"
           "  in this directory (and OS-specific subdirectories like\n"
           "  unix/, linux/, and windows/).\n"
           "  Don't edit.\n"
           "  Don't use this unit in your programs, it's just not for this.\n"
           "  Generated by Kambi's Elisp function all-units-in-dir. }\n"
           "\n"
           "interface\n"
           "\n"
           "uses\n"
         ))
         (dir-files (directory-files-pascal-units dir))
         (dir-linux-files (all-units-in-dir-internal-directory-files-pascal-units
           dir "linux"))
         (dir-unix-files (all-units-in-dir-internal-directory-files-pascal-units
           dir "unix"))
         (dir-windows-files (all-units-in-dir-internal-directory-files-pascal-units
           dir "windows"))
         ;; ** Add more OSes here **
       )

       ;; Remove UNIT-NAME from dir-files. Unit cannot have itself on it's
       ;; "uses" clause.
       (setq dir-files (remove (concat (downcase unit-name) ".pas") dir-files))
       (setq dir-files (remove (concat (downcase unit-name) ".pp" ) dir-files))

    (let ( (units-count (+ (length dir-files)
                           (length dir-linux-files)
                           (length dir-unix-files)
                           (length dir-windows-files)
                           ;; ** Add more OSes here **
                           ))
           (this-unit-global-number 1)
         )

      ;; Add all units in dir-files
      (all-units-in-dir-internal-write-uses-list dir-files
        'result 'this-unit-global-number units-count t)

      ;; Add all units in dir-linux-files
      (when (/= (length dir-linux-files) 0)
        (setq result (concat result "  {$ifdef LINUX}\n"))

        (all-units-in-dir-internal-write-uses-list dir-linux-files
          'result 'this-unit-global-number units-count nil)

        (setq result (concat result "  {$endif LINUX}\n"))
      )

      ;; Add all units in dir-unix-files
      (when (/= (length dir-unix-files) 0)
        (setq result (concat result "  {$ifdef UNIX}\n"))

        (all-units-in-dir-internal-write-uses-list dir-unix-files
          'result 'this-unit-global-number units-count nil)

        (setq result (concat result "  {$endif UNIX}\n"))
      )

      ;; Add all units in dir-windows-files
      (when (/= (length dir-windows-files) 0)
        (setq result (concat result "  {$ifdef MSWINDOWS}\n"))

        (all-units-in-dir-internal-write-uses-list dir-windows-files
          'result 'this-unit-global-number units-count nil)

        (setq result (concat result "  {$endif MSWINDOWS}\n"))
      )

      ;; ** Add more OSes here **
    )

    (setq result (concat result
      "  ;\n"
      "\n"
      "implementation\n"
      "\n"
      "end.\n"
    ))

    result
  )
)

(defun write-unit-all-units-in-dir (dir unit-name)
  "This function opens a buffer visiting file UNIT-NAME.pas
 (UNIT-NAME is made downcase, as required by FPC)
in directory DIR. Then contents of this buffer are cleared and then
contents generated by (all-units-in-dir DIR UNIT-NAME) are pasted."
  (setq vc-handled-backends nil) ;; Ugly hack --- this is needed, otherwise
                                 ;; vc may want to recover lost files.
                                 ;; TODO: This should be set only locally.
  (find-file
    (kam-file-name-in-directory dir (concat (downcase unit-name) ".pas"))
  )
  (delete-region (point-min) (point-max))
  ;; note that we're already inside DIR so below I pass "."
  (insert (all-units-in-dir "." unit-name))
)

(defconst kam-regexp-any-letter "\\(?:.\\|\n\\)")

(defun kam-dfm2pas-extract-display-label ()
  (interactive)
  (kam-simple-re-replace-region
    (concat "object " kam-regexp-any-letter "*?DisplayLabel = '\\(.*\\)'"
                      kam-regexp-any-letter "*?FieldName = '\\(.*\\)'"
                      kam-regexp-any-letter "*?end\n")
    "DataSet.FieldByName('\\2').DisplayLabel := '\\1';\n")
)

(defun kam-insert-guid ()
  (interactive)
  (call-process "gen_guid" nil t)
)

(defun kam-clear-pascal-method-implementation ()
  "Remove Pascal functions bodies. Useful when simplifying multi-unit
testcase for FPC bug report, and trimming away code that doesn't affect bug."
  (interactive)
  ;; [^`] is used just as "any character including newline"
  ;; [^e] is added to not catch "begin end; another proc begin end;"

  ;; remove first function bodies with preceding "var" sections
;;  (query-replace-regexp "\nvar\n[^`]+?\nbegin\n" "\\nbegin\n")

  (query-replace-regexp "\nbegin\n[^e][^`]+?\nend;\n" "\nbegin { single line, to not match anymore } end;\n")
)

;; ------------------------------------------------------------

(provide 'kambi-pascal-functions)

;; eof ------------------------------------------------------------
